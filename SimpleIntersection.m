function [scenario, egoVehicle, sensor] = SimpleIntersection()
%generateSensorData - Returns sensor detections
%    allData = generateSensorData returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = generateSensorData optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 09-Jun-2023 15:11:56

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);


%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensors = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = lidarPointCloudGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits', [-20 20], ...
    'ActorProfiles', profiles);

sensors{2} = lidarPointCloudGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 75, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20], ...
    'ActorProfiles', profiles);

sensors{3} = lidarPointCloudGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 135, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian',...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

sensors{4} = lidarPointCloudGenerator('SensorIndex', 4, ...
    'SensorLocation', [-1 0], ...
    'Yaw', 180, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

sensors{5} = lidarPointCloudGenerator('SensorIndex', 5, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -75, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20], ...
    'ActorProfiles', profiles);

sensors{6} = lidarPointCloudGenerator('SensorIndex', 6, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -135, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

numSensors = 6;

for i = 1:numSensors
sensors{i}.AzimuthResolution = 0.16;
sensors{i}.Height = 0.4;
sensors{i}.HasRoadsInputPort = false;
sensors{i}.HasOrganizedOutput = false;
end

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [93.9 -0.3 0;
    -9.8 -0.6 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [26.9 35 0;
    27.1 -91.7 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-6.3 -2.4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [25.2 31.4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [25.2 31.4 0;
    25.2 25.2 0;
    25.1 13.4 0;
    25.2 4.3 0;
    25.4 -3.8 0;
    25.2 -14.8 0;
    25.7 -83.7 0];
speed = [20;10;10;10;15;20;30];
waittime = [0;0;0;0;0;0;0];
trajectory(car1, waypoints, speed, waittime);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [25.2 24.9 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [25.2 24.9 0;
    25.5 6.7 0;
    27.7 1.1 0;
    32.1 -1.2 0;
    37.7 -1.8 0;
    59.9 -1.9 0;
    90.5 -1.9 0];
speed = [20;10;10;20;20;30;30];
yaw =  [-90;NaN;NaN;NaN;NaN;NaN;NaN];
trajectory(truck, waypoints, speed, 'Yaw', yaw);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [25.2 13.3 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [25.2 13.3 0;
    25.2 4.5 0;
    25.2 -3.8 0;
    25.2 -14.8 0;
    25.2 -33.5 0;
    25.1 -88.7 0];
speed = [20;5;15;20;20;25];
waittime = [0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

